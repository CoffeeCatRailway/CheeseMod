buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def modName = project.name
version = "${project.version}-${project.mcVersion}"
group = project.group
archivesBaseName = project.modId

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: project.mcpChannel.toString(), version: project.mcpMappings.toString()

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                cheesemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                cheesemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cheesemod', '--all', '--output', file('src/generated/resources/')

            mods {
                cheesemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenLocal()

    maven { // JustEnoughItems
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // JustEnoughResources
        name "bintray-way2muchnoise"
        url "https://dl.bintray.com/way2muchnoise/dev"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcVersion}-${project.forgeVersion}"

    compileOnly fg.deobf("mezz.jei:jei-${project.mcVersion}:${project.jeiVersion}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mcVersion}:${project.jeiVersion}")

    compile "jeresources:JustEnoughResources-${project.mcVersion}:${project.jerVersion}"

    if (findProject(':TheOneProbe') != null) {
        compile project(':TheOneProbe')
    } else {
        compile fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-${project.topVersion}") {
            transitive = false
        })
    }

}

processResources {
    inputs.property("version", version)
    inputs.property("modId", project.modId)
    inputs.property("name", modName)
    inputs.property("author", project.author)
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': version, 'modId': project.modId, 'name': modName, 'author': project.author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${project.author}",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "${modName}",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
